// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kenmobility/git-api-service/infra/git (interfaces: GitManagerClient)
//
// Generated by this command:
//
//	mockgen -package git_mocks -destination infra/git/mocks/mock_git_manager_client.go github.com/kenmobility/git-api-service/infra/git GitManagerClient
//

// Package git_mocks is a generated GoMock package.
package git_mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	domain "github.com/kenmobility/git-api-service/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockGitManagerClient is a mock of GitManagerClient interface.
type MockGitManagerClient struct {
	ctrl     *gomock.Controller
	recorder *MockGitManagerClientMockRecorder
}

// MockGitManagerClientMockRecorder is the mock recorder for MockGitManagerClient.
type MockGitManagerClientMockRecorder struct {
	mock *MockGitManagerClient
}

// NewMockGitManagerClient creates a new mock instance.
func NewMockGitManagerClient(ctrl *gomock.Controller) *MockGitManagerClient {
	mock := &MockGitManagerClient{ctrl: ctrl}
	mock.recorder = &MockGitManagerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitManagerClient) EXPECT() *MockGitManagerClientMockRecorder {
	return m.recorder
}

// FetchCommits mocks base method.
func (m *MockGitManagerClient) FetchCommits(arg0 context.Context, arg1 domain.RepoMetadata, arg2, arg3 time.Time, arg4 string, arg5, arg6 int) ([]domain.Commit, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchCommits", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].([]domain.Commit)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FetchCommits indicates an expected call of FetchCommits.
func (mr *MockGitManagerClientMockRecorder) FetchCommits(arg0, arg1, arg2, arg3, arg4, arg5, arg6 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchCommits", reflect.TypeOf((*MockGitManagerClient)(nil).FetchCommits), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// FetchRepoMetadata mocks base method.
func (m *MockGitManagerClient) FetchRepoMetadata(arg0 context.Context, arg1 string) (*domain.RepoMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchRepoMetadata", arg0, arg1)
	ret0, _ := ret[0].(*domain.RepoMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchRepoMetadata indicates an expected call of FetchRepoMetadata.
func (mr *MockGitManagerClientMockRecorder) FetchRepoMetadata(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchRepoMetadata", reflect.TypeOf((*MockGitManagerClient)(nil).FetchRepoMetadata), arg0, arg1)
}
