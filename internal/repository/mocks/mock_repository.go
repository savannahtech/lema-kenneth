// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kenmobility/git-api-service/internal/repository (interfaces: Repository)
//
// Generated by this command:
//
//	mockgen -package repo_mocks -destination internal/repository/mocks/mock_repository.go github.com/kenmobility/git-api-service/internal/repository Repository
//

// Package repo_mocks is a generated GoMock package.
package repo_mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/kenmobility/git-api-service/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AllCommitsByRepository mocks base method.
func (m *MockRepository) AllCommitsByRepository(arg0 context.Context, arg1 domain.RepoMetadata, arg2 domain.APIPagingData) ([]domain.Commit, *domain.PagingInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllCommitsByRepository", arg0, arg1, arg2)
	ret0, _ := ret[0].([]domain.Commit)
	ret1, _ := ret[1].(*domain.PagingInfo)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AllCommitsByRepository indicates an expected call of AllCommitsByRepository.
func (mr *MockRepositoryMockRecorder) AllCommitsByRepository(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllCommitsByRepository", reflect.TypeOf((*MockRepository)(nil).AllCommitsByRepository), arg0, arg1, arg2)
}

// AllRepoMetadata mocks base method.
func (m *MockRepository) AllRepoMetadata(arg0 context.Context) ([]domain.RepoMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllRepoMetadata", arg0)
	ret0, _ := ret[0].([]domain.RepoMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllRepoMetadata indicates an expected call of AllRepoMetadata.
func (mr *MockRepositoryMockRecorder) AllRepoMetadata(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllRepoMetadata", reflect.TypeOf((*MockRepository)(nil).AllRepoMetadata), arg0)
}

// GetByCommitID mocks base method.
func (m *MockRepository) GetByCommitID(arg0 context.Context, arg1 string) (*domain.Commit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCommitID", arg0, arg1)
	ret0, _ := ret[0].(*domain.Commit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCommitID indicates an expected call of GetByCommitID.
func (mr *MockRepositoryMockRecorder) GetByCommitID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCommitID", reflect.TypeOf((*MockRepository)(nil).GetByCommitID), arg0, arg1)
}

// RepoMetadataByName mocks base method.
func (m *MockRepository) RepoMetadataByName(arg0 context.Context, arg1 string) (*domain.RepoMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RepoMetadataByName", arg0, arg1)
	ret0, _ := ret[0].(*domain.RepoMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RepoMetadataByName indicates an expected call of RepoMetadataByName.
func (mr *MockRepositoryMockRecorder) RepoMetadataByName(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RepoMetadataByName", reflect.TypeOf((*MockRepository)(nil).RepoMetadataByName), arg0, arg1)
}

// RepoMetadataByPublicId mocks base method.
func (m *MockRepository) RepoMetadataByPublicId(arg0 context.Context, arg1 string) (*domain.RepoMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RepoMetadataByPublicId", arg0, arg1)
	ret0, _ := ret[0].(*domain.RepoMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RepoMetadataByPublicId indicates an expected call of RepoMetadataByPublicId.
func (mr *MockRepositoryMockRecorder) RepoMetadataByPublicId(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RepoMetadataByPublicId", reflect.TypeOf((*MockRepository)(nil).RepoMetadataByPublicId), arg0, arg1)
}

// SaveCommit mocks base method.
func (m *MockRepository) SaveCommit(arg0 context.Context, arg1 domain.Commit) (*domain.Commit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCommit", arg0, arg1)
	ret0, _ := ret[0].(*domain.Commit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveCommit indicates an expected call of SaveCommit.
func (mr *MockRepositoryMockRecorder) SaveCommit(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCommit", reflect.TypeOf((*MockRepository)(nil).SaveCommit), arg0, arg1)
}

// SaveRepoMetadata mocks base method.
func (m *MockRepository) SaveRepoMetadata(arg0 context.Context, arg1 domain.RepoMetadata) (*domain.RepoMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveRepoMetadata", arg0, arg1)
	ret0, _ := ret[0].(*domain.RepoMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveRepoMetadata indicates an expected call of SaveRepoMetadata.
func (mr *MockRepositoryMockRecorder) SaveRepoMetadata(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRepoMetadata", reflect.TypeOf((*MockRepository)(nil).SaveRepoMetadata), arg0, arg1)
}

// TopCommitAuthorsByRepository mocks base method.
func (m *MockRepository) TopCommitAuthorsByRepository(arg0 context.Context, arg1 domain.RepoMetadata, arg2 int) ([]domain.AuthorCommitCount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TopCommitAuthorsByRepository", arg0, arg1, arg2)
	ret0, _ := ret[0].([]domain.AuthorCommitCount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TopCommitAuthorsByRepository indicates an expected call of TopCommitAuthorsByRepository.
func (mr *MockRepositoryMockRecorder) TopCommitAuthorsByRepository(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TopCommitAuthorsByRepository", reflect.TypeOf((*MockRepository)(nil).TopCommitAuthorsByRepository), arg0, arg1, arg2)
}

// UpdateFetchingStateForAllRepos mocks base method.
func (m *MockRepository) UpdateFetchingStateForAllRepos(arg0 context.Context, arg1 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFetchingStateForAllRepos", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFetchingStateForAllRepos indicates an expected call of UpdateFetchingStateForAllRepos.
func (mr *MockRepositoryMockRecorder) UpdateFetchingStateForAllRepos(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFetchingStateForAllRepos", reflect.TypeOf((*MockRepository)(nil).UpdateFetchingStateForAllRepos), arg0, arg1)
}

// UpdateRepoMetadata mocks base method.
func (m *MockRepository) UpdateRepoMetadata(arg0 context.Context, arg1 domain.RepoMetadata) (*domain.RepoMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRepoMetadata", arg0, arg1)
	ret0, _ := ret[0].(*domain.RepoMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRepoMetadata indicates an expected call of UpdateRepoMetadata.
func (mr *MockRepositoryMockRecorder) UpdateRepoMetadata(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRepoMetadata", reflect.TypeOf((*MockRepository)(nil).UpdateRepoMetadata), arg0, arg1)
}
